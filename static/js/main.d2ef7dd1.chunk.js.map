{"version":3,"sources":["context.js","SetupForm.js","Loading.js","Modal.js","App.js","index.js"],"names":["table","sports","history","politics","AppContext","React","createContext","AppProvider","children","useState","waiting","setWaiting","loading","setLoading","amount","category","difficulty","quiz","setQuiz","questions","setQuestions","index","setIndex","correct","setCorrect","error","setError","isModalOpen","setIsModalOpen","fetchQuestions","url","a","fetch","response","json","data","console","log","results","length","openModal","nextQuestion","oldIndex","checkAnswer","value","oldState","Provider","handleStart","e","preventDefault","isNaN","closeModal","useGlobalContext","useContext","SetupForm","handleChange","name","target","className","htmlFor","type","id","min","max","onChange","onClick","Loading","Modal","toFixed","App","question","incorrect_answers","correct_answer","incorrectAnswerValue","Object","values","answers","correctAnswer","randomAnswer","Math","floor","random","push","key","map","answer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2ef7dd1.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport React, { useState, useContext, useEffect } from 'react'\r\nconst url =''\r\n\r\n//3 categories that we want\r\nconst table = {   \r\n  sports: 21,\r\n  history: 23,\r\n  politics: 24,\r\n}\r\n\r\nconst API_ENDPOINT = 'https://opentdb.com/api.php?'\r\nconst AppContext = React.createContext()\r\n\r\nconst AppProvider = ({ children }) => {\r\n  //states\r\n  const[waiting,setWaiting] = useState(true)    //showing the first page (SetupForm)\r\n  const[loading,setLoading] = useState(false)\r\n  const[quiz,setQuiz] = useState({              //the default values for the first page\r\n    amount:10,\r\n    category:'sports',\r\n    difficulty:'easy'\r\n  })\r\n  const[questions,setQuestions] = useState([])\r\n  const[index,setIndex] =useState(0)   //index in first question is zero\r\n  const[correct,setCorrect] = useState(0)    //count the correct answers\r\n  const[error,setError] = useState(false)\r\n  const[isModalOpen,setIsModalOpen] = useState(false)\r\n\r\n  //fetch data from API\r\n  const fetchQuestions = async(url) =>{\r\n    setLoading(true)\r\n    setWaiting(false)   \r\n    try{\r\n      const response = await fetch(url)\r\n      const data = await response.json()\r\n      console.log(data.results)\r\n      //we want the fetch happens after clicking start button on the first page so we are not going to fetch the data here\r\n      if(data.results.length > 0){\r\n        setQuestions(data.results)\r\n        setWaiting(false)\r\n        setLoading(false)\r\n        setError(false)\r\n      }else{\r\n        setWaiting(true)\r\n        setError(true)\r\n      }\r\n    }catch(error){\r\n      console.log(error)\r\n      setError(true)\r\n      setWaiting(true)\r\n    }\r\n    \r\n  }\r\n\r\n  const handleStart = (e)=>{\r\n    e.preventDefault()\r\n    console.log(\"start clicked\")\r\n    setIndex(0)\r\n    if(quiz.amount<1 || quiz.amount>50 || isNaN(quiz.amount)){\r\n      console.log(\"error\")\r\n      setError(true)\r\n      setWaiting(true)\r\n    }\r\n    else{\r\n      console.log(\"show api\")\r\n      const { amount, category, difficulty } = quiz\r\n      const url = `${API_ENDPOINT}amount=${amount}&category=${table[category]}&difficulty=${difficulty}`\r\n      fetchQuestions(url)\r\n    }\r\n\r\n  }\r\n\r\n  const openModal=()=>{\r\n    setIsModalOpen(true)\r\n  }\r\n\r\n  const closeModal =()=>{\r\n    setWaiting(true)   //go to the SetupForm\r\n    setCorrect(0)\r\n    setIsModalOpen(false)\r\n    setQuiz({\r\n      amount:10,\r\n      category:'sports',\r\n      difficulty:'easy'\r\n    })\r\n  }\r\n\r\n  const nextQuestion =() =>{\r\n    setIndex((oldIndex)=>{\r\n      const index = oldIndex +1\r\n      if(index > questions.length-1){    //index begins with 0--if we reaches the last question,then open the modal\r\n        openModal()\r\n      }\r\n      else{   //we didn't reach the end of questions\r\n        return index\r\n      }\r\n    })\r\n  }\r\n\r\n  const checkAnswer = (value) =>{\r\n    if(value){  //if user answers the question\r\n      setCorrect((oldState)=>oldState+1)\r\n    }\r\n    nextQuestion()\r\n  }\r\n\r\n  return <AppContext.Provider value={{loading,setLoading,quiz,setQuiz,isModalOpen,correct,index,error,setError,questions,setQuestions,handleStart,checkAnswer,openModal,closeModal,nextQuestion,checkAnswer,waiting}}>{children}</AppContext.Provider>\r\n}\r\n\r\nexport const useGlobalContext = () => {\r\n  return useContext(AppContext)\r\n}\r\n\r\nexport { AppContext, AppProvider }\r\n","//The first page form\r\nimport React from 'react'\r\nimport { useGlobalContext } from './context'\r\n\r\nconst SetupForm = () => {\r\n  const{quiz,setQuiz,error,handleStart} = useGlobalContext()\r\n  //if we don't use the name:[value] method, then we have to write two different handleChange for \"category\" and \"difficulty\"\r\n  const handleChange = (e)=>{\r\n    const name = e.target.name\r\n    const value = e.target.value\r\n    setQuiz({ ...quiz, [name]: value })\r\n  }\r\n  return(\r\n    <main>\r\n      <section className='quiz quiz-small'>\r\n        <form className='setup-form'>\r\n          <h2>setup quiz</h2>\r\n          {/* number of questions */}\r\n          <div className='form-control'>\r\n            <label htmlFor=\"amount\">number of questions</label>\r\n            <input type=\"number\" name=\"amount\" id=\"amount\" className='form-input' min={1} max={50} value={quiz.amount} onChange={handleChange}/>\r\n          </div>\r\n          {/* category */}\r\n          <div className='form-control'>\r\n            <label htmlFor=\"category\">category</label>\r\n            <select name=\"category\" id=\"category\" className='form-input' value={quiz.category} onChange={handleChange}>\r\n              <option value=\"sports\">sports</option>\r\n              <option value=\"history\">history</option>\r\n              <option value=\"politics\">politics</option>\r\n            </select>\r\n          </div>\r\n          {/* difficulty */}\r\n          <div className='form-control'>\r\n            <label htmlFor=\"difficulty\">select difficulty</label>\r\n            <select name=\"difficulty\" id=\"difficulty\" className='form-input' value={quiz.difficulty} onChange={handleChange}>\r\n              <option value=\"easy\">easy</option>\r\n              <option value=\"medium\">medium</option>\r\n              <option value=\"hard\">hard</option>\r\n            </select>\r\n          </div>\r\n\r\n          {error && (\r\n            <p className='error'>\r\n              can't generate questions, please try different options\r\n            </p>\r\n          )}\r\n\r\n          {/* button */}\r\n          <button type=\"submit\" className='submit-btn' onClick={handleStart}>start</button>\r\n        </form>\r\n      </section>\r\n    </main>\r\n    \r\n  )\r\n}\r\n\r\nexport default SetupForm\r\n","import React from 'react'\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <main>\r\n      <div className='loading'></div>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default Loading\r\n","//Modal--the answer page\r\nimport React from 'react'\r\nimport { useGlobalContext } from './context'\r\n\r\nconst Modal = () => {\r\n  const{isModalOpen,correct,questions,closeModal} = useGlobalContext()\r\n  console.log(correct)\r\n  console.log(questions.length)  //same as index\r\n\r\n  const correctAnswerPercentage = ()=>{\r\n    const percentage = ((correct/questions.length)*100).toFixed(0)  //The toFixed() method converts a number to a string and rounds the string to a specified number of decimals.\r\n    return percentage\r\n  }  \r\n  return(\r\n    <div className={`${isModalOpen ? 'modal-container isOpen' : 'modal-container'}`}>\r\n      <div className='modal-content'>\r\n        <h2>congrats!</h2>\r\n        <p>You answered {correctAnswerPercentage()}% of questions correctly</p>\r\n        <button className='close-btn' onClick={closeModal}>play again</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Modal\r\n","import React from 'react'\r\nimport { useGlobalContext } from './context'\r\nimport SetupForm from './SetupForm'\r\nimport Loading from './Loading'\r\nimport Modal from './Modal'\r\n\r\nfunction App() {\r\n  //bring from the context.js file\r\n  const{quiz,waiting,loading,index,questions,correct,checkAnswer,nextQuestion} = useGlobalContext()\r\n\r\n  console.log(quiz.amount)\r\n  console.log(index)  //index begins from 0\r\n  console.log(questions.length)\r\n\r\n  if(loading){\r\n    return <Loading />\r\n  }\r\n  if(waiting){\r\n    return <SetupForm />\r\n  }\r\n\r\n  //we have to write the below line as object and || [] to not receive error for the first render of undefined answer\r\n  const { question:question, incorrect_answers:incorrect_answers, correct_answer:correct_answer } = questions[index] ||[]\r\n  console.log(incorrect_answers)\r\n  //all answers in the four buttons\r\n  //the two line below is written since we can not iterate for incorrect_answers directly\r\n  let incorrectAnswerValue = Object.values(incorrect_answers || [])\r\n  let answers = [...incorrectAnswerValue]  \r\n  const correctAnswer = correct_answer\r\n  const randomAnswer = Math.floor(Math.random()*4)  \r\n    if(randomAnswer === 3){\r\n      answers.push(correctAnswer)\r\n    }else{\r\n      answers.push(answers[randomAnswer])\r\n      answers[randomAnswer] = correctAnswer\r\n    }\r\n\r\n    if(typeof(index) === 'undefined'){\r\n    console.log(\"modal\")\r\n    return <Modal/>\r\n    }\r\n    \r\n    else{\r\n      return(\r\n        <main>\r\n          <section className='quiz'>\r\n            <p className='correct-answers'>correct answer : {correct}/{index} </p>\r\n            <article className='container' key={index}>\r\n              <h2>{question}</h2>\r\n                <div className='btn-container'>\r\n                  {answers.map((answer,index)=>{\r\n                    return <button className='answer-btn' key={index} onClick={()=>checkAnswer(correctAnswer === answer)}>{answer}</button>\r\n                  })}\r\n                </div>\r\n              </article>\r\n              <button className='next-question' onClick={nextQuestion}>next question</button>\r\n          </section>\r\n        </main>\r\n      )\r\n    }\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport { AppProvider } from './context'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <AppProvider>\r\n      <App />\r\n    </AppProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}